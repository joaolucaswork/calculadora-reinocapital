/**
 * Debug Script para Bot√µes de Navega√ß√£o
 * Execute no console do navegador para diagnosticar problemas
 */

function debugButtonSystems() {
  console.log('üîç === DEBUG BUTTON SYSTEMS ===');

  // 1. Verificar se os sistemas est√£o dispon√≠veis
  console.log('\nüìã Sistemas Dispon√≠veis:');
  console.log('ReinoStepNavigationProgressSystem:', !!window.ReinoStepNavigationProgressSystem);
  console.log('ReinoNavigationButtons:', !!window.ReinoNavigationButtons);
  console.log('ReinoSimpleButtonSystem:', !!window.ReinoSimpleButtonSystem);
  console.log('ReinoButtonCoordinator:', !!window.ReinoButtonCoordinator);

  // 2. Verificar estado do sistema de navega√ß√£o
  if (window.ReinoStepNavigationProgressSystem) {
    const nav = window.ReinoStepNavigationProgressSystem;
    console.log('\nüß≠ Estado do Sistema de Navega√ß√£o:');
    console.log('isInitialized:', nav.isInitialized);
    console.log('currentStep:', nav.currentStep);
    console.log(
      'canProceedToNext():',
      nav.canProceedToNext ? nav.canProceedToNext() : 'm√©todo n√£o dispon√≠vel'
    );
    console.log('steps.length:', nav.steps ? nav.steps.length : 'steps n√£o dispon√≠vel');
  }

  // 3. Verificar bot√µes no DOM
  console.log('\nüîò Bot√µes no DOM:');
  const nextButtons = document.querySelectorAll('[element-function="next"]');
  const prevButtons = document.querySelectorAll('.step-btn.prev-btn');
  console.log('Next buttons encontrados:', nextButtons.length);
  console.log('Prev buttons encontrados:', prevButtons.length);

  // 4. Verificar estado dos bot√µes
  console.log('\n‚ö° Estado dos Bot√µes:');
  nextButtons.forEach((btn, i) => {
    console.log(`Next button ${i}:`, {
      disabled: btn.disabled,
      style: btn.style.cssText,
      classes: btn.className,
    });
  });

  prevButtons.forEach((btn, i) => {
    console.log(`Prev button ${i}:`, {
      disabled: btn.disabled,
      style: btn.style.cssText,
      classes: btn.className,
    });
  });

  // 5. Verificar event listeners
  console.log('\nüëÇ Testando Event Listeners:');
  if (nextButtons.length > 0) {
    console.log('Clicando no primeiro bot√£o Next...');
    nextButtons[0].click();
  }

  // 6. Verificar inicializa√ß√£o do ButtonCoordinator
  if (window.ReinoButtonCoordinator) {
    console.log('\nüéõÔ∏è Button Coordinator:');
    console.log('isInitialized:', window.ReinoButtonCoordinator.isInitialized);
    console.log('navigationButtons:', !!window.ReinoButtonCoordinator.navigationButtons);
  }

  // 7. Verificar se h√° conflitos
  console.log('\n‚ö†Ô∏è Verificando Conflitos:');
  const simpleSystemActive =
    window.ReinoSimpleButtonSystem && window.ReinoSimpleButtonSystem.stepNavigationSystem;
  const navigationButtonsActive =
    window.ReinoNavigationButtons && window.ReinoNavigationButtons.stepNavigationSystem;

  console.log('SimpleButtonSystem ativo:', simpleSystemActive);
  console.log('NavigationButtons ativo:', navigationButtonsActive);

  if (simpleSystemActive && navigationButtonsActive) {
    console.warn('‚ö†Ô∏è CONFLITO: Ambos os sistemas de bot√µes est√£o ativos!');
  }

  console.log('\n‚úÖ Debug conclu√≠do');
}

// Fun√ß√£o para for√ßar reinicializa√ß√£o
function forceReinitializeButtons() {
  console.log('üîÑ For√ßando reinicializa√ß√£o dos bot√µes...');

  if (window.ReinoButtonCoordinator && window.ReinoStepNavigationProgressSystem) {
    window.ReinoButtonCoordinator.init(window.ReinoStepNavigationProgressSystem);
    console.log('‚úÖ ButtonCoordinator reinicializado');
  }

  if (window.ReinoNavigationButtons && window.ReinoStepNavigationProgressSystem) {
    window.ReinoNavigationButtons.init(window.ReinoStepNavigationProgressSystem);
    console.log('‚úÖ NavigationButtons reinicializado');
  }
}

// Fun√ß√£o para testar bot√µes manualmente
function testButtons() {
  console.log('üß™ Testando bot√µes manualmente...');

  const nextButtons = document.querySelectorAll('[element-function="next"]');
  const prevButtons = document.querySelectorAll('.step-btn.prev-btn');

  console.log('Simulando clique no bot√£o Next...');
  if (nextButtons.length > 0) {
    nextButtons[0].dispatchEvent(new Event('click', { bubbles: true }));
  }

  setTimeout(() => {
    console.log('Simulando clique no bot√£o Prev...');
    if (prevButtons.length > 0) {
      prevButtons[0].dispatchEvent(new Event('click', { bubbles: true }));
    }
  }, 1000);
}

// Executar debug automaticamente
console.log('üöÄ Executando debug dos bot√µes...');
setTimeout(() => {
  debugButtonSystems();
}, 1000);

// Disponibilizar fun√ß√µes globalmente para uso no console
window.debugButtonSystems = debugButtonSystems;
window.forceReinitializeButtons = forceReinitializeButtons;
window.testButtons = testButtons;

console.log('\nüìù Fun√ß√µes dispon√≠veis no console:');
console.log('- debugButtonSystems() - Executa debug completo');
console.log('- forceReinitializeButtons() - For√ßa reinicializa√ß√£o');
console.log('- testButtons() - Testa bot√µes manualmente');
