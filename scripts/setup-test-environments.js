#!/usr/bin/env node

/**
 * Setup Test Environments Script
 * Creates isolated local Supabase instances for development and testing
 */

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

const ENVIRONMENTS = {
  development: {
    port: 54321,
    folder: 'instances/development'
  },
  testing: {
    port: 54322,
    folder: 'instances/testing'
  }
};

function createDirectory(dirPath) {
  if (!fs.existsSync(dirPath)) {
    fs.mkdirSync(dirPath, { recursive: true });
    console.log(`‚úÖ Created directory: ${dirPath}`);
  } else {
    console.log(`üìÅ Directory already exists: ${dirPath}`);
  }
}

function createSupabaseConfig(environment, config) {
  const configPath = path.join(config.folder, 'supabase', 'config.toml');
  
  // Create base config if it doesn't exist
  if (!fs.existsSync(configPath)) {
    console.log(`üîß Initializing Supabase in ${config.folder}...`);
    execSync(`cd ${config.folder} && npx supabase init`, { stdio: 'inherit' });
  }

  // Read and modify config
  let configContent = fs.readFileSync(configPath, 'utf8');
  
  // Update ports for testing environment
  if (environment === 'testing') {
    configContent = configContent
      .replace(/api_port = 54321/, `api_port = ${config.port}`)
      .replace(/db_port = 54322/, `db_port = ${config.port + 1}`)
      .replace(/studio_port = 54323/, `studio_port = ${config.port + 2}`)
      .replace(/inbucket_port = 54324/, `inbucket_port = ${config.port + 3}`)
      .replace(/storage_port = 54325/, `storage_port = ${config.port + 4}`)
      .replace(/auth_port = 54326/, `auth_port = ${config.port + 5}`)
      .replace(/edge_functions_port = 54327/, `edge_functions_port = ${config.port + 6}`)
      .replace(/logflare_port = 54328/, `logflare_port = ${config.port + 7}`);
  }

  fs.writeFileSync(configPath, configContent);
  console.log(`‚öôÔ∏è Updated config for ${environment} environment`);
}

function createEnvironmentFile(environment, config) {
  const envFileName = `.env.${environment}`;
  const envContent = `# ${environment.toUpperCase()} Environment Configuration
# Auto-generated by setup-test-environments.js

SUPABASE_URL=http://localhost:${config.port}
SUPABASE_ANON_KEY=<will-be-generated-after-start>
SUPABASE_SERVICE_ROLE_KEY=<will-be-generated-after-start>
ENVIRONMENT=${environment}

# Database Configuration
DATABASE_URL=postgresql://postgres:postgres@localhost:${config.port + 1}/postgres

# Test Configuration
${environment === 'testing' ? `
TEST_DATABASE_CLEANUP=true
TEST_DATA_PREFIX=test_
TEST_ISOLATION=true
` : ''}
`;

  fs.writeFileSync(envFileName, envContent);
  console.log(`üìÑ Created ${envFileName}`);
}

function createPackageScripts() {
  const packageJsonPath = 'package.json';
  
  if (!fs.existsSync(packageJsonPath)) {
    console.log('‚ùå package.json not found');
    return;
  }

  const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf8'));
  
  if (!packageJson.scripts) {
    packageJson.scripts = {};
  }

  // Add environment management scripts
  const newScripts = {
    // Development environment
    'dev:db:start': 'cd instances/development && npx supabase start',
    'dev:db:stop': 'cd instances/development && npx supabase stop',
    'dev:db:reset': 'cd instances/development && npx supabase db reset',
    'dev:db:status': 'cd instances/development && npx supabase status',
    
    // Testing environment
    'test:db:start': 'cd instances/testing && npx supabase start',
    'test:db:stop': 'cd instances/testing && npx supabase stop',
    'test:db:reset': 'cd instances/testing && npx supabase db reset',
    'test:db:status': 'cd instances/testing && npx supabase status',
    'test:db:cleanup': 'node scripts/cleanup-test-data.js',
    
    // Combined operations
    'db:start:all': 'npm run dev:db:start && npm run test:db:start',
    'db:stop:all': 'npm run dev:db:stop && npm run test:db:stop',
    'db:status:all': 'npm run dev:db:status && npm run test:db:status',
    
    // Testing with proper environment
    'test:integration': 'npm run test:db:start && npx playwright test && npm run test:db:cleanup',
    'test:unit': 'NODE_ENV=test npm test'
  };

  Object.assign(packageJson.scripts, newScripts);
  
  fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
  console.log('üì¶ Updated package.json with environment scripts');
}

function createMigrationScript() {
  const migrationContent = `-- Add environment tracking to calculator_submissions
-- This migration adds environment isolation capabilities

-- Add environment column if it doesn't exist
DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'calculator_submissions' 
    AND column_name = 'environment'
  ) THEN
    ALTER TABLE calculator_submissions 
    ADD COLUMN environment VARCHAR(20) DEFAULT 'production';
  END IF;
END $$;

-- Add test_run_id for test isolation
DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'calculator_submissions' 
    AND column_name = 'test_run_id'
  ) THEN
    ALTER TABLE calculator_submissions 
    ADD COLUMN test_run_id VARCHAR(50) NULL;
  END IF;
END $$;

-- Add created_by for tracking data source
DO $$ 
BEGIN
  IF NOT EXISTS (
    SELECT 1 FROM information_schema.columns 
    WHERE table_name = 'calculator_submissions' 
    AND column_name = 'created_by'
  ) THEN
    ALTER TABLE calculator_submissions 
    ADD COLUMN created_by VARCHAR(50) DEFAULT 'user';
  END IF;
END $$;

-- Create index for efficient cleanup
CREATE INDEX IF NOT EXISTS idx_calculator_submissions_environment 
ON calculator_submissions(environment);

CREATE INDEX IF NOT EXISTS idx_calculator_submissions_test_run 
ON calculator_submissions(test_run_id) 
WHERE test_run_id IS NOT NULL;

-- Create view for production data only
CREATE OR REPLACE VIEW calculator_submissions_production AS
SELECT * FROM calculator_submissions 
WHERE environment = 'production';

-- Create view for test data only
CREATE OR REPLACE VIEW calculator_submissions_test AS
SELECT * FROM calculator_submissions 
WHERE environment IN ('testing', 'development');
`;

  const migrationDir = 'supabase/migrations';
  createDirectory(migrationDir);
  
  const timestamp = new Date().toISOString().replace(/[-:]/g, '').split('.')[0];
  const migrationFile = path.join(migrationDir, `${timestamp}_add_environment_isolation.sql`);
  
  fs.writeFileSync(migrationFile, migrationContent);
  console.log(`üìÑ Created migration: ${migrationFile}`);
}

function main() {
  console.log('üöÄ Setting up test environments for Reino Capital Calculator...\n');

  // Create instance directories
  Object.entries(ENVIRONMENTS).forEach(([environment, config]) => {
    console.log(`\nüìÅ Setting up ${environment} environment...`);
    createDirectory(config.folder);
    createSupabaseConfig(environment, config);
    createEnvironmentFile(environment, config);
  });

  // Create package scripts
  console.log('\nüì¶ Updating package.json...');
  createPackageScripts();

  // Create migration
  console.log('\nüóÉÔ∏è Creating database migration...');
  createMigrationScript();

  console.log('\n‚úÖ Environment setup complete!');
  console.log('\nüìã Next steps:');
  console.log('1. Run: npm run dev:db:start    # Start development database');
  console.log('2. Run: npm run test:db:start   # Start testing database');
  console.log('3. Update your .env files with the generated keys');
  console.log('4. Run migrations on both environments');
  console.log('5. Update your application to use environment-specific configs');
  
  console.log('\nüîß Available commands:');
  console.log('- npm run db:start:all     # Start both environments');
  console.log('- npm run db:stop:all      # Stop both environments');
  console.log('- npm run db:status:all    # Check status of both');
  console.log('- npm run test:integration # Run tests with cleanup');
}

if (require.main === module) {
  main();
}

module.exports = { createDirectory, createSupabaseConfig, createEnvironmentFile };
